{"version":3,"sources":["components/AddMovie.module.css","components/Movie.module.css","components/MoviesList.module.css","components/Movie.js","components/MoviesList.js","components/AddMovie.js","App.js","index.js"],"names":["module","exports","Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","key","id","AddMovie","titleRef","useRef","openingTextRef","releaseDateRef","onSubmit","event","preventDefault","current","value","onAddMovie","control","htmlFor","type","ref","rows","max","Date","toISOString","split","App","useState","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","useCallback","fetch","response","ok","Error","json","data","loadedMovies","push","console","log","message","useEffect","content","length","MoviesList","addMovieHandler","newMovie","method","body","JSON","stringify","headers","Fragment","onClick","ReactDOM","createRoot","document","getElementById","render"],"mappings":";4HACAA,EAAOC,QAAU,CAAC,QAAU,4B,oBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,cAAc,kC,2LCcjBC,EAXD,SAACC,GAEb,OACE,wBAAIC,UAAWC,IAAQC,OACrB,4BAAKH,EAAMI,OACX,4BAAKJ,EAAMK,aACX,2BAAIL,EAAMM,e,gBCUDC,EAfG,SAACP,GACjB,OACE,wBAAIC,UAAWC,IAAQ,gBACpBF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,kBAAC,EAAD,CACEO,IAAKP,EAAMQ,GACXP,MAAOD,EAAMC,MACbC,YAAaF,EAAME,YACnBC,YAAaH,EAAMG,mB,wBCmCdM,MA5Cf,SAAkBZ,GAChB,IAAMa,EAAWC,iBAAO,IAClBC,EAAiBD,iBAAO,IACxBE,EAAiBF,iBAAO,IAgB9B,OACE,0BAAMG,SAfR,SAAuBC,GACrBA,EAAMC,iBAIN,IAAMhB,EAAQ,CACZC,MAAOS,EAASO,QAAQC,MACxBf,YAAaS,EAAeK,QAAQC,MACpChB,YAAaW,EAAeI,QAAQC,OAGtCrB,EAAMsB,WAAWnB,KAKf,yBAAKF,UAAWC,IAAQqB,SACtB,2BAAOC,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOd,GAAG,QAAQe,IAAKb,KAErC,yBAAKZ,UAAWC,IAAQqB,SACtB,2BAAOC,QAAQ,gBAAf,gBACA,8BAAUG,KAAK,IAAIhB,GAAG,eAAee,IAAKX,KAE5C,yBAAKd,UAAWC,IAAQqB,SACtB,2BAAOC,QAAQ,QAAf,gBACA,2BACEC,KAAK,OACLd,GAAG,OACHe,IAAKV,EACLY,KAAK,IAAIC,MAAOC,cAAcC,MAAM,KAAK,MAI7C,+C,yyMCgFSC,MArHf,WACE,MAA4BC,mBAAS,IAArC,mBAAOzB,EAAP,KAAe0B,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAkCMC,EAAqBC,sBAAW,sBAAC,iGACrCJ,GAAa,GACbE,EAAS,MAF4B,kBAIZG,MACrB,oEALiC,WAI7BC,EAJ6B,QAOrBC,GAPqB,sBAQ3B,IAAIC,MAAM,yBARiB,wBAUhBF,EAASG,OAVO,QAanC,IAASnC,KAHHoC,EAV6B,OAY7BC,EAAe,GACLD,EACdC,EAAaC,KAAK,CAChBrC,GAAID,EACJN,MAAO0C,EAAKpC,GAAKN,MACjBC,YAAayC,EAAKpC,GAAKL,YACvBC,YAAawC,EAAKpC,GAAKJ,cAK3B4B,EAAUa,GAvByB,kDAyBnCE,QAAQC,IAAR,MACAZ,EAAS,KAAIa,SA1BsB,QA6BrCf,GAAa,GA7BwB,0DA8BpC,IAEHgB,qBAAU,WACRb,MACC,CAACA,IAEJ,IAAIc,EAAU,+CAEVlB,IACFkB,EAAU,0CAGRhB,IACFgB,EAAU,2BAAIhB,IAGZ7B,EAAO8C,OAAS,IAClBD,EAAU,kBAACE,EAAD,CAAY/C,OAAQA,KAGhCyC,QAAQC,IAAI1C,GAEZ,IAAMgD,EAAe,uCAAG,WAAOC,GAAP,uFACChB,MACrB,mEACA,CACEiB,OAAQ,OACRC,KAAMC,KAAKC,UAAUJ,GACrBK,QAAS,CACP,eAAgB,sBAPA,cAChBpB,EADgB,gBAWHA,EAASG,OAXN,yDAAH,sDAerB,OACE,kBAAC,IAAMkB,SAAP,KACE,iCACE,kBAAC,EAAD,CAAUzC,WAAYkC,KAExB,iCACE,4BAAQQ,QAASzB,GAAjB,iBAEF,iCAAUc,KChHHY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,kBAAC,EAAD,S","file":"static/js/main.822bc1dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"AddMovie_control__2O1UH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie___zQdB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__1niO2\"};","import React from \"react\"\n\nimport classes from \"./Movie.module.css\"\n\nconst Movie = (props) => {\n  // console.log(props)\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  )\n}\n\nexport default Movie\n","import React from \"react\"\n\nimport Movie from \"./Movie\"\nimport classes from \"./MoviesList.module.css\"\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes[\"movies-list\"]}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.releaseDate}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  )\n}\n\nexport default MovieList\n","import React, { useRef } from \"react\"\n\nimport classes from \"./AddMovie.module.css\"\n\nfunction AddMovie(props) {\n  const titleRef = useRef(\"\")\n  const openingTextRef = useRef(\"\")\n  const releaseDateRef = useRef(\"\")\n\n  function submitHandler(event) {\n    event.preventDefault()\n\n    // could add validation here...\n\n    const movie = {\n      title: titleRef.current.value,\n      openingText: openingTextRef.current.value,\n      releaseDate: releaseDateRef.current.value,\n    }\n\n    props.onAddMovie(movie)\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className={classes.control}>\n        <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" id=\"title\" ref={titleRef} />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor=\"opening-text\">Opening Text</label>\n        <textarea rows=\"5\" id=\"opening-text\" ref={openingTextRef}></textarea>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor=\"date\">Release Date</label>\n        <input\n          type=\"date\"\n          id=\"date\"\n          ref={releaseDateRef}\n          max={new Date().toISOString().split(\"T\")[0]}\n          // max={new Date().toLocaleDateString(\"en-ca\")}\n        />\n      </div>\n      <button>Add Movie</button>\n    </form>\n  )\n}\n\nexport default AddMovie\n","import React, { useState, useEffect, useCallback } from \"react\"\n\nimport MoviesList from \"./components/MoviesList\"\nimport \"./App.css\"\nimport AddMovie from \"./components/AddMovie\"\n\nfunction App() {\n  const [movies, setMovies] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  // multiple then() callbacks\n  // const fetchMoviesHandler = () => {\n  //   setIsLoading(true)\n  //   setError(null) //to clear previous errors if any\n\n  //   fetch(\"https://swapi.dev/api/films/\")\n  //     .then((response) => {\n  //       if (!response.ok) {\n  //         throw new Error(\"SOMETHING!\")\n  //       }\n  //       return response.json()\n  //     })\n  //     .then((data) => {\n  //       const transformedData = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           releaseDate: movieData.release_date,\n  //           openingText: movieData.opening_crawl,\n  //         }\n  //       })\n\n  //       setMovies(transformedData)\n  //       setIsLoading(false)\n  //     })\n  //     .catch((err) => {\n  //       setIsLoading(false)\n  //       setError(err.message)\n  //     })\n  // }\n\n  // using async await\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true)\n    setError(null)\n    try {\n      const response = await fetch(\n        \"https://react-http-88862-default-rtdb.firebaseio.com/movies.json\"\n      )\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\")\n      }\n      const data = await response.json()\n\n      const loadedMovies = []\n      for (let key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          releaseDate: data[key].releaseDate,\n          openingText: data[key].openingText,\n        })\n        // console.log(loadedMovies[0].releaseDate)\n      }\n\n      setMovies(loadedMovies)\n    } catch (err) {\n      console.log(err)\n      setError(err.message)\n    }\n\n    setIsLoading(false)\n  }, [])\n\n  useEffect(() => {\n    fetchMoviesHandler()\n  }, [fetchMoviesHandler])\n\n  let content = <p>No movies found!</p>\n\n  if (isLoading) {\n    content = <p>Loading...</p>\n  }\n\n  if (error) {\n    content = <p>{error}</p>\n  }\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />\n  }\n\n  console.log(movies)\n\n  const addMovieHandler = async (newMovie) => {\n    const response = await fetch(\n      \"https://react-http-88862-default-rtdb.firebaseio.com/movies.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(newMovie),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n    const data = await response.json()\n    // console.log(data)\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}